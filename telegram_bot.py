import pandas as pd
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from team_selection import load_data, train_and_predict, generate_team_with_optimization, generate_random_team
from collections import defaultdict

captain_name = None
emoji = {'GK': 'üß§', 'DEF': 'üõ°Ô∏è', 'MID': 'üéØ', 'FWD': '‚öΩ'}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–±—Ä–∞—Ç—å Fantasy-—Å–æ—Å—Ç–∞–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/team <—Ç—É—Ä> <–±—é–¥–∂–µ—Ç>\n"
        "/random_vs_optimal <—Ç—É—Ä> <–±—é–¥–∂–µ—Ç>\n"
        "/team_players <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–∞–Ω–¥—ã>\n"
        "/set_captain <–∏–º—è_–∏–≥—Ä–æ–∫–∞>\n"
        "/top_scorer <—Ç—É—Ä>\n"
        "/top_assistant <—Ç—É—Ä>\n"
        "/player_points <–∏–º—è_–∏–≥—Ä–æ–∫–∞> <—Ç—É—Ä>"
    )


async def set_team(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global captain_name
    try:
        if len(context.args) != 2:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /team <—Ç—É—Ä> <–±—é–¥–∂–µ—Ç>")
            return

        target_tour = int(context.args[0])
        budget = float(context.args[1])

        data = load_data()
        predict_data = train_and_predict(data, target_tour)
        team, total_cost = generate_team_with_optimization(predict_data, budget)

        grouped = defaultdict(list)
        for player in team:
            grouped[player['position']].append(player)

        main_counts = {'GK': 1, 'DEF': 3, 'MID': 4, 'FWD': 3}
        main_squad, bench = [], []

        for pos in ['GK', 'DEF', 'MID', 'FWD']:
            players = sorted(grouped[pos], key=lambda x: -x['predicted_points'])
            main_squad += players[:main_counts[pos]]
            bench += players[main_counts[pos]:]

        total_points = sum(p['predicted_points'] for p in team)

        message = f"üéΩ <b>–°–æ—Å—Ç–∞–≤ –Ω–∞ —Ç—É—Ä {target_tour}</b> (–±—é–¥–∂–µ—Ç: {budget} –º–ª–Ω):\n\n"
        message += "<b>üîù –û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤:</b>\n"
        for player in main_squad:
            pos = player['position']
            is_captain = "üß¢ " if player['player_name'] == captain_name else ""
            message += f"{is_captain}{emoji[pos]} {player['player_name']} ({player['team']}) ‚Äî {player['predicted_points']:.2f} –æ—á–∫–æ–≤, üí∞ {player['cost']} –º–ª–Ω\n"

        message += "\nü™ë <b>–ó–∞–ø–∞—Å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n"
        for player in bench:
            pos = player['position']
            message += f"{emoji[pos]} {player['player_name']} ({player['team']}) ‚Äî {player['predicted_points']:.2f} –æ—á–∫–æ–≤, üí∞ {player['cost']} –º–ª–Ω\n"

        message += f"\nüìä <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost} –º–ª–Ω\n"
        message += f"üìà <b>–°—É–º–º–∞ –æ—á–∫–æ–≤ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã:</b> {total_points:.2f}"

        await update.message.reply_text(message, parse_mode="HTML")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def random_vs_optimal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 2:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /random_vs_optimal <—Ç—É—Ä> <–±—é–¥–∂–µ—Ç>")
            return

        target_tour = int(context.args[0])
        budget = float(context.args[1])

        data = load_data()
        predict_data = train_and_predict(data, target_tour)

        optimal_team, optimal_cost = generate_team_with_optimization(predict_data, budget)
        optimal_points = sum(p['predicted_points'] for p in optimal_team)

        random_team, random_cost = generate_random_team(predict_data, budget)
        random_points = sum(p['predicted_points'] for p in random_team)

        diff = optimal_points - random_points

        message = f"üìä <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç—É—Ä {target_tour} (–±—é–¥–∂–µ—Ç: {budget} –º–ª–Ω)</b>\n\n"
        message += f"‚úÖ <b>–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>: {optimal_points:.2f} –æ—á–∫–æ–≤, üí∞ {optimal_cost} –º–ª–Ω\n"
        message += f"üé≤ <b>–°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>: {random_points:.2f} –æ—á–∫–æ–≤, üí∞ {random_cost} –º–ª–Ω\n"
        message += f"\nüìâ <b>–†–∞–∑–Ω–∏—Ü–∞:</b> {diff:+.2f} –æ—á–∫–æ–≤ –≤ –ø–æ–ª—å–∑—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"

        await update.message.reply_text(message, parse_mode="HTML")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def team_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /team_players <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–∞–Ω–¥—ã>")
        return

    team_name = " ".join(context.args)
    data = load_data()
    players = data[data['team'].str.lower() == team_name.lower()]['player_name'].unique()

    if len(players) == 0:
        await update.message.reply_text(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{team_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    players_list = "\n".join(players)
    await update.message.reply_text(f"üìã –ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã <b>{team_name}</b>:\n{players_list}", parse_mode="HTML")


async def set_captain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global captain_name
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /set_captain <–∏–º—è_–∏–≥—Ä–æ–∫–∞>")
        return

    name = " ".join(context.args)
    data = load_data()
    if name not in data['player_name'].values:
        await update.message.reply_text(f"‚ùå –ò–≥—Ä–æ–∫ —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    captain_name = name
    await update.message.reply_text(f"üß¢ –ö–∞–ø–∏—Ç–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{captain_name}</b>", parse_mode="HTML")


async def top_scorer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /top_scorer <—Ç—É—Ä>")
        return

    tour = int(context.args[0])
    tour_data = data[data['round'] == tour]
    top_players = tour_data.groupby('player_name')['goals'].sum().nlargest(3)

    message = f"‚öΩ <b>–¢–æ–ø-3 –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤ —Ç—É—Ä–∞ {tour}:</b>\n"
    for i, (name, goals) in enumerate(top_players.items(), 1):
        message += f"{i}. {name} ‚Äî {goals} –≥–æ–ª(–æ–≤)\n"
    await update.message.reply_text(message, parse_mode="HTML")


async def top_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /top_assistant <—Ç—É—Ä>")
        return

    tour = int(context.args[0])
    tour_data = data[data['round'] == tour]
    top_players = tour_data.groupby('player_name')['assists'].sum().nlargest(3)

    message = f"üéØ <b>–¢–æ–ø-3 –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—É—Ä–∞ {tour}:</b>\n"
    for i, (name, assists) in enumerate(top_players.items(), 1):
        message += f"{i}. {name} ‚Äî {assists} –∞—Å—Å–∏—Å—Ç(–æ–≤)\n"
    await update.message.reply_text(message, parse_mode="HTML")


async def player_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /player_points <–∏–º—è_–∏–≥—Ä–æ–∫–∞> <—Ç—É—Ä>")
        return

    name = " ".join(context.args[:-1])
    tour = int(context.args[-1])

    data = load_data()
    predict_data = train_and_predict(data, tour)
    player_row = predict_data[predict_data['player_name'].str.lower() == name.lower()]

    if player_row.empty:
        await update.message.reply_text(f"‚ùå –ò–≥—Ä–æ–∫ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    player = player_row.iloc[0]
    await update.message.reply_text(
        f"üìà <b>{player['player_name']}</b> –æ–∂–∏–¥–∞–µ—Ç {player['predicted_points']:.2f} –æ—á–∫–æ–≤ –≤ —Ç—É—Ä–µ {tour}\n"
        f"–ü–æ–∑–∏—Ü–∏—è: {player['position']}, –ö–æ–º–∞–Ω–¥–∞: {player['team']}, üí∞ {player['cost']} –º–ª–Ω",
        parse_mode="HTML"
    )


def main():
    app = Application.builder().token("7611819731:AAHHpINYPDyWi7IQwn-6PqiVVbdFRkjHRkc").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("team", set_team))
    app.add_handler(CommandHandler("random_vs_optimal", random_vs_optimal))
    app.add_handler(CommandHandler("team_players", team_players))
    app.add_handler(CommandHandler("set_captain", set_captain))
    app.add_handler(CommandHandler("top_scorer", top_scorer))
    app.add_handler(CommandHandler("top_assistant", top_assistant))
    app.add_handler(CommandHandler("player_points", player_points))

    app.run_polling()


if __name__ == "__main__":
    main()
